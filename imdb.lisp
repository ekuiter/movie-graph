(defvar *file-name* "~/graph/imdb/actresses.list")
(defvar *file-length* nil)
(defvar *file-start* nil)

(defun search-actor-naive (actor)
  (with-open-file (stream *file-name*)
    (do ((line (read-line stream nil) (read-line stream nil)))
	((null line))
      (when (eql (search actor line) 0)
	(return-from search-actor-naive t))))
  nil)

(defun get-file-length ()
  (or *file-length*
    (setf *file-length*
	  (with-open-file (in *file-name*)
	    (file-length in)))))

(defun get-file-start ()
  (or *file-start*
      (setf *file-start*
	    (with-open-file (stream *file-name*)
	      (do ((line (read-line stream nil) (read-line stream nil)))
		  ((null line))
		(when (equal line "THE ACTRESSES LIST")
		  (dotimes (i 4)
		    (read-line stream nil))
		  (return (file-position stream))))))))

(defun read-until-actor (stream)
  (read-line stream nil)
  (let ((begin-of-line (file-position stream)))
    (do ((line (read-line stream nil) (read-line stream nil)))
	((null line))
      (when (and (> (length line) 0) (char/= (aref line 0) #\Tab))
	(file-position stream begin-of-line)
	(return-from read-until-actor (subseq line 0 (position #\Tab line))))
      (setf begin-of-line (file-position stream)))))

(defun search-actor-binary (actor)
  (with-open-file (stream *file-name*)
    (labels ((binary-search (min max)
	       (format t "Doing binary search between ~a and ~a~%" min max)
	       (let ((mid (floor (+ min max) 2)))
		 (file-position stream mid)
		 (let* ((current-actor (read-until-actor stream))
			(less (string<= actor current-actor))
			(new-min (if less min mid))
			(new-max (if less mid max)))
		   (when (eql (search actor current-actor) 0)
		     (return-from binary-search current-actor))
		   (file-position stream new-min)
		   (binary-search new-min new-max)))))
      (file-position stream (get-file-start))
      (binary-search (get-file-start) (get-file-length)))))